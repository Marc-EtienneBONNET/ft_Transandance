Grâce à votre site web, les utilisateurs joueront au Pong avec d'autres. Vous fournirez une interface utilisateur agréable, un chat et des jeux en ligne multijoueurs en temps réel !
Votre travail doit respecter les règles suivantes :
	-Le backend de votre site Web doit être écrit en NestJS.
	-L'interface doit être écrite avec un framework TypeScript de votre choix.
	-Vous êtes libre d'utiliser la bibliothèque de votre choix dans ce contexte. Cependant, vous devez utiliser la dernière version stable de chaque bibliothèque ou framework utilisé dans votre projet.
	-Vous devez utiliser une base de données PostgreSQL. C'est tout, pas d'autre base de données.
	-Votre site Web doit être une application d'une seule page. L'utilisateur doit être en mesure d'utiliser le boutons Précédent et Suivant du navigateur.
	-Votre site Web doit être compatible avec la dernière version stable à jour de
	Google Chrome, Firefox et Safari.
	-L'utilisateur ne doit rencontrer aucune erreur non gérée et aucun avertissement lorsqu'il parcourt le site Internet.
	-Tout doit être lancé par un seul appel à : docker-compose up --build

Lorsque vos ordinateurs en clusters fonctionnent sous Linux, vous utiliserez
Docker en mode rootless pour des raisons de sécurité. Cela vient avec 2
sur le côté :
	1) vos fichiers d'exécution Docker doivent se trouver dans /goinfre
	ou /sgoinfre. 
	2) vous ne pouvez pas utiliser les soi-disant "volumes à montage lié"
	entre l'hôte et le conteneur si des UID non root sont utilisés dans le
	récipient. Selon le projet, votre situation et le contexte,
	plusieurs replis existent : Docker dans une VM, reconstruire votre conteneur après
	vos modifications, créez votre propre image docker avec la racine comme UID unique.

II.2 Problèmes de sécurité
Afin de créer un site Web entièrement fonctionnel, voici quelques problèmes de sécurité auxquels vous devez vous attaquer :
	- Tout mot de passe stocké dans votre base de données doit être haché.
	- Votre site web doit être protégé contre les injections SQL.
	- Vous devez implémenter une sorte de validation côté serveur pour les formulaires et toute entrée utilisateur.
 
 Assurez-vous d'utiliser un algorithme de hachage de mot de passe fort
Pour des raisons de sécurité évidentes, toutes les informations d'identification, clés API, env
les variables etc... doivent être enregistrées localement dans un fichier .env et ignorées par
git. Les informations d'identification stockées publiquement vous mèneront directement à un échec du projet.


 II.3 Compte utilisateur
	-L'utilisateur doit se connecter en utilisant le système OAuth de 42 intranet.
	-L'utilisateur doit pouvoir choisir un nom unique qui sera affiché sur le
	site Internet.
	-L'utilisateur doit pouvoir télécharger un avatar. Si l'utilisateur ne télécharge pas d'avatar, un avatar par défaut doit être défini.
	-L'utilisateur doit pouvoir activer l'authentification à deux facteurs. Par exemple, Google Authenticator ou l'envoi d'un SMS sur leur téléphone.
	-L'utilisateur doit pouvoir ajouter d'autres utilisateurs en tant qu'amis et voir leur statut actuel (en ligne, hors ligne, dans un jeu, etc.).
	-Les statistiques (telles que : les victoires et les défaites, le niveau du classement, les réalisations, etc.) doivent être affichées sur le profil de l'utilisateur.
	-Chaque utilisateur doit avoir un historique des matchs comprenant les parties 1 contre 1, le classement et tout autre élément utile. Toute personne connectée doit pouvoir la consulter.

II.4 Chatter
Vous devez également créer un chat pour vos utilisateurs :
	-L'utilisateur doit pouvoir créer des canaux (salons de discussion) qui peuvent être soit publics, soit privés, soit protégés par un mot de passe.
	-L'utilisateur doit pouvoir envoyer des messages directs à d'autres utilisateurs.
	-L'utilisateur doit pouvoir bloquer d'autres utilisateurs. De cette façon, ils ne verront plus messages du compte qu'ils ont bloqué.
	-L'utilisateur qui a créé un nouveau canal est automatiquement défini comme propriétaire du canal jusqu'à ce qu'il le quitte.
	-Le propriétaire du canal peut définir un mot de passe requis pour accéder au canal, le modifier et également le supprimer.
	-Le propriétaire du canal est un administrateur de canal. Ils peuvent définir d'autres utilisateurs comme administrateurs.
	-Les administrateurs d'un canal peuvent bannir ou mettre en sourdine des utilisateurs pour une durée limitée.
	-L'utilisateur doit pouvoir inviter d'autres utilisateurs à jouer à un jeu Pong via le chat
	interface.
	-L'utilisateur doit pouvoir accéder aux profils des autres joueurs via l'interface de chat.

II.5 Jeu
Le but principal de ce site Web est de jouer à Pong contre d'autres joueurs et de montrer à tout le monde à quel point vous êtes bon !
	-Par conséquent, les utilisateurs doivent pouvoir jouer à un jeu Pong en direct contre un autre joueur directement sur le site Web.
	-Il doit y avoir un système de matchmaking : l'utilisateur peut rejoindre une file d'attente jusqu'à ce qu'il soit automatiquement mis en correspondance avec quelqu'un d'autre.
	-Ça peut être un jeu en toile, ou ça peut être un jeu rendu en 3D, ça peut aussi être moche, mais dans tous les cas, ça doit être fidèle au Pong original (1972).
	-Vous devez proposer certaines options de personnalisation (par exemple, des bonus ou des cartes différentes). Cependant, l'utilisateur devrait pouvoir sélectionner une version par défaut du jeu sans aucune fonctionnalité supplémentaire s'il le souhaite.
	-Le jeu doit être réactif !
	-L'utilisateur doit pouvoir regarder une partie en direct entre d'autres utilisateurs sans interférer avec celle-ci.

Pensez aux problèmes de réseau, comme une déconnexion inattendue ou un décalage.
Vous devez offrir la meilleure expérience utilisateur possible.

